import {
  Grommet,
  Heading,
  Page,
  PageContent,
  Paragraph,
  Text,
  grommet,
} from 'grommet'
import { ReactNode, useEffect, useState } from 'react'
import { UseKeyDownCallbackParams, useKeyDown } from './utils/useKeyDown'

function App() {
  const [text, _setText] = useState(
    `
    –¶–∞–≥ –∞–≥–∞–∞—Ä —Ç—ç–Ω—ç–≥ —Ö–∞–ª—É—É–Ω
    –•–æ—Ç—ã–Ω –∞–º—å–¥—Ä–∞–ª –Ω—ç–≥—ç–Ω —Ö—ç–≤–∏–π–Ω
    “Æ—Ä–≥—ç–ª–∂–∏–ª—Å—ç—ç—Ä, —ç–Ω—Ö —Ç–∞–π–≤–Ω—ã ”©—Ä–≥”©–Ω —á”©–ª”©”©
    ”®—á–∏–≥–¥”©—Ä —É—É—Å–∞–Ω —é–º–Ω—ã –Ω”©–ª”©”©
    –ì—ç–Ω—ç—Ç —á–∏ –≥–∞—Ä—á –∏—Ä—Å—ç–Ω
    –ù—ç—Ä–∏–π–≥ —á–∏–Ω—å –±–∏ —Å–∞–Ω–∞—Ö–≥“Ø–π –≥–∞–π—Ö—Å–∞–Ω
    –ß–∏ —Ö—ç–ª—Å—ç–Ω ”©—á–∏–≥–¥”©—Ä —Ç–∞–Ω–∏–ª—Ü—Å–∞–Ω
    –ë–∏ —Å–∞–Ω–∞—Ö–≥“Ø–π ”©—á–∏–≥–¥”©—Ä —É—É—Å–∞–Ω –±–∞–π—Å–∞–Ω, —É—É—Å–∞–Ω –±–∞–π—Å–∞–Ω
  `
      .trim()
      .split('')
  )
  const [typedText, setTypedText] = useState<Array<String>>([])
  const [displayText, setDisplayText] = useState<Array<ReactNode>>([])

  const keyPressCallback = ({ key }: UseKeyDownCallbackParams) => {
    if (key === 'Backspace') {
      setTypedText((letters) => letters.slice(0, -1))
      return
    }

    // Ignore typing non-characters
    if (key.length > 1) {
      return
    }

    setTypedText((letters) => [...letters, key])
  }

  useEffect(() => {
    setDisplayText(
      text.map((key, idx) => {
        const isTyped = typedText.length > idx
        const isCorrect = isTyped ? typedText[idx] === key : false
        const color = isTyped ? (isCorrect ? 'green' : 'red') : 'default'

        return (
          <Text key={`letter-${idx}`} color={color}>
            {key}
          </Text>
        )
      })
    )
  }, [typedText])

  useKeyDown(keyPressCallback)

  return (
    <Grommet theme={grommet} full>
      <Page kind="narrow" fill>
        <PageContent>
          <Heading alignSelf="center">Mongolian Typing Tutor üá≤üá≥</Heading>
          <Paragraph alignSelf="center">{displayText}</Paragraph>
          <Paragraph alignSelf="center">{typedText.join('')}</Paragraph>
        </PageContent>
      </Page>
    </Grommet>
  )
}

export default App
